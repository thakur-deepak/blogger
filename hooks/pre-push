#!/usr/bin/env bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).


# Sensiolabs Security Checker
echo '##### Security checker #####';
./.deploy/commands/security_checker.sh || EXIT_CODE=1

# PHP Lint
echo '##### linter #####';
./vendor/bin/parallel-lint --exclude vendor . --colors || EXIT_CODE=1

# Unit tests
echo '##### Tests #####';
./vendor/bin/phpunit --color=always

# PHP CodeSniffer
echo '##### Code sniffer #####';
./vendor/bin/phpcs --config-set colors 1 >> /dev/null || EXIT_CODE=1
./vendor/bin/phpcs --config-set show_progress 1 >> /dev/null || EXIT_CODE=1
./vendor/bin/phpcs --config-set show_warnings 1 >> /dev/null || EXIT_CODE=1
./vendor/bin/phpcs app/* -n --runtime-set ignore_warnings_on_exit true --standard=./.deploy/phpcs_ruleset.xml || EXIT_CODE=1

# PHP Mess Detector
echo '##### Mess detector #####';
./vendor/bin/phpmd . text .deploy/phpmd_ruleset.xml --exclude vendor,_ide_helper.php,database,app/Console/Kernel.php,tests
RESULT=$?
[[ $RESULT -eq 0 ]] && echo "PHP Mess Detector check passed"

exit $RESULT


exit 0
